
#!/usr/bin/env python3
import subprocess
import sys
import os
import time
import signal
import requests

def install_dependencies():
    """Install required packages"""
    required_packages = ['fastapi', 'uvicorn', 'python-dotenv', 'openai', 'requests']
    
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    for package in required_packages:
        try:
            if package == 'python-dotenv':
                import dotenv
            else:
                __import__(package)
            print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
            result = subprocess.run([sys.executable, "-m", "pip", "install", package], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {result.stderr}")

def check_port(port=8001):
    """Check if port is available"""
    try:
        response = requests.get(f"http://127.0.0.1:{port}/health", timeout=2)
        return response.status_code == 200
    except:
        return False

def kill_existing_process():
    """Kill any existing FastAPI process on port 8001"""
    try:
        # Try to find and kill existing process
        result = subprocess.run(['lsof', '-ti', ':8001'], 
                              capture_output=True, text=True)
        if result.stdout.strip():
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid:
                    print(f"üî™ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É 8001 (PID: {pid})")
                    os.kill(int(pid), signal.SIGTERM)
                    time.sleep(1)
    except:
        pass

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # Kill existing processes
    kill_existing_process()
    
    # Install dependencies
    install_dependencies()
    
    # Check environment
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ Secrets")
        print("   –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–æ –±–µ–∑ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    else:
        print("‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω")
    
    # Change to server directory
    server_dir = os.path.join(os.path.dirname(__file__), "server")
    if os.path.exists(server_dir):
        original_dir = os.getcwd()
        os.chdir(server_dir)
        print(f"üìÅ –†–∞–±–æ—Ç–∞—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {server_dir}")
        
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫–∞—é FastAPI —Å–µ—Ä–≤–µ—Ä...")
            print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://127.0.0.1:8001")
            
            # Run the server
            subprocess.run([sys.executable, "fastapi_proxy.py"], check=True)
            
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            os.chdir(original_dir)
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {server_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        # Try to run from current directory
        try:
            print("üîÑ –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
            subprocess.run([sys.executable, "server/fastapi_proxy.py"], check=True)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {e}")

if __name__ == "__main__":
    main()
